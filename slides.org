* Python 101 Review

  We're still using and focusing on Python 2.7 rather than Python 3.x.
  Python 2.7 provides some of the features of python 3.x but still has better library and platform support than 3, even today.
  Python 2.7 is closer and feels more familiar to C and C++ programmers, which many of us are.

  That said, [[./images/its-happening.gif][its's happening]] as measured by the [[http://py3readiness.org/][Python 3 Readiness]] site, which at time of writing has 339 of 360 most popular packages on the [[http://pypi.python.org][Cheese Shop]] ready for Python 3.
  The main differences have to do with the handling of the print and Unicode.
  Print is a function in Python 3, as it should be, and a statement in Python 2, as it had to be.
  Python 2 has some pitfalls and quirks due to being ASCII first, whilst Python 3 is Unicode first.
  This, of course, has taken forever and introduced breaking changes - the [[http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html][core team is aware]].

  For a new, serious project, you should probably use Python 3 unless you have a specific reason not to.

** Why Python is BALLER

   - Python is generally very readable and regular - this makes code maintainable and transferable.
   - Python provides abstractions for terse expressions
   - Python is portable and has decent C integration
   - Python has packages for [[https://xkcd.com/353/]["everything"]]
   - Python [[http://norvig.com/sudoku.html][solves problems]] definitively and succinctly

** Types, variables, operators, conditionals, loops, functions

   - Python is [[http://c2.com/cgi/wiki?DynamicTyping][dynamically typed]] with over twenty [[https://docs.python.org/2/library/stdtypes.html][built-in types]]
   - Python's grammar supports twenty one infix [[https://docs.python.org/2/reference/lexical_analysis.html#operators][operators]]

* Python 101 Review - Types

  - Truth types :: Booleans (True, False) and None
  - Numeric types :: int, float, long, complex
  - Iterator types :: iterator protocol defined in [[https://www.python.org/dev/peps/pep-0234/][PEP-0234]]
  - Generator types :: lazy iterators utilizing `yield` defined in [[https://www.python.org/dev/peps/pep-0255/][PEP-0255]]
  - Sequence types :: str, unicode, list, tuple, bytearray, buffer, xrange
  - Set types :: set, frozenset
  - Mapping types :: dict
  - View types :: dictview, memoryview
  - Context manager types :: context management protocol defined in [[https://www.python.org/dev/peps/pep-0343/][PEP-0343]]
  - Other types :: Modules, classes, functions, methods, code, type, null, ellipsis, NotImplemented

* Python 101 Review - Variables and literals

** Literals

  - Literals are literal values such as the number `1` or the list `[3, 2, 1]`
    : >>> 9
    : 9
    : >>> 'nine'
    : 'nine'
    : >>> [1, 1, 1, 2, 2, 2, 3, 3, 3]
    : [1, 1, 1, 2, 2, 2, 3, 3, 3]
    : >>> {1, 1, 1, 2, 2, 2, 3, 3, 3}
    : set([1, 2, 3])

** Variables

  - Variables are names assigned to values (literal or dynamic)
  - `=` is the assignment operator for an [[https://docs.python.org/2/reference/simple_stmts.html#assignment-statements][assignment statement]]
    : >>> apples = 10
  - Variables have types determined by their values at runtime
    : >>> int == type(apples)
    : True
  - Variables may change value and type throughout a program's run time
    : >>> apples = 'red'
    : >>> int == type(apples)
    : False
  - Variables may be unpacked from a sequence type or iterator
    : >>> count, color, cost_per_pound = (10, 'red', 6.69)
    : >>> count
    : 10
    : >>> color
    : 'red'
    : >>> cost_per_pound
    : 6.69

* Python 101 Review - Operators and Expressions

  - PEP 308 :: Conditional Expressions

* Python 101 Review - Control flow statements and loops

  

* Python 101 Review - Functions

  - PEP-227 :: scope and closures

* Standard Python Functions

* Standard Python Libraries

* Generators and comprehensions

PEP-

* Modules and packages 

PEP-
PEP-440 - Versioning restrictions

* Command line arguments and interfaces 

* Tour of well known powerful libraries

PEP-8
PyFlakes
